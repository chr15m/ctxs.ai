#!/bin/bash

# Assemble a conventions file from a set of conventions files.
# Install this by symlinking into your ~/bin dir.

# Function to display usage
usage() {
    echo "Usage: $0 [user/convention-1 user/convention-2 ...] > CONVENTIONS.md"
    echo "If no files are specified, it lists all .md files in the conventions dir, excluding README.md."
}

# Determine the directory where the script is located
SCRIPT_DIR="$(dirname "$(readlink -f "$0")")/../contexts/"

# If no arguments are provided, list all .md files in the script's directory, excluding README.md
if [ "$#" -eq 0 ]; then
    echo -e "Assemble an a conventions file from conventions files.\n"
    usage
    echo
    echo "Conventions files available:"
    for file in "$SCRIPT_DIR"/**/*.md; do
        [ -e "$file" ] || { echo "No .md files found."; break; }
        rel_path="${file#"$SCRIPT_DIR"}"  # Remove the base directory prefix
        rel_path="${rel_path#/}"        # Remove leading slash
        [ "$(basename "$file")" != "README.md" ] && echo -e " - ${rel_path%.md}"
    done
    exit 1
fi

# Function to strip frontmatter from markdown
strip_frontmatter() {
    awk '
        BEGIN { in_frontmatter=0; found_frontmatter=0 }
        /^---$/ {
            if (in_frontmatter) {
                in_frontmatter=0;
                found_frontmatter=1;
                next;
            } else if (NR==1) {
                in_frontmatter=1;
                found_frontmatter=1;
                next;
            }
        }
        !in_frontmatter && (found_frontmatter || NR>1) { print }
    '
}

# Concatenate specified conventions files
for arg in "$@"; do
    # Append .md extension if not present
    [[ "$arg" == *.md ]] || arg="$arg.md"
    # Handle both full paths and user/context style paths
    if [[ -f "$SCRIPT_DIR/$arg" ]]; then
        strip_frontmatter < "$SCRIPT_DIR/$arg"
    else
        echo "Error: Convention file '$arg' not found in $SCRIPT_DIR" >&2
        exit 1
    fi
    echo
done
